MAY 5, 2020.

CHALLENGE 5:
First Unique Character in a String

Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
____________________________________________________________________________________________________________________________________________________________________________
class Solution {
    public int firstUniqChar(String s) {
        
    char []arr = s.toCharArray();
    int []count = new int[256];
    for(int i=0; i< arr.length; i++)
    {
        count[arr[i]]++;
    }
    int index = -1;
    for(int k=0; k< s.length(); k++)
    {
        if(count[s.charAt(k)] == 1)
        {
            index = k;
            break;
        }
    }
        return index;
    }
}

/*
104 / 104 test cases passed.
Status: Accepted
Runtime: 5 ms
Memory Usage: 39.4 MB
*/
_________________________________________________________________________________________________________________________________________________________________________________
class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> cmap = new HashMap<Character, Integer>();
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (!cmap.containsKey(c)) 
            {
                cmap.put(c, 1);
            } 
            else
            {
                cmap.put(c, cmap.get(c) + 1);
            
            }
        }
        
        
        for (int i = 0; i < n; i++) {
            if (cmap.get(s.charAt(i)) == 1) 
                return i;
        }
        return -1;
    }
}


/*
104 / 104 test cases passed.
Status: Accepted
Runtime: 26 ms
Memory Usage: 40.4 MB
*/

________________________________________________________________________________________________________________________________________________________________________






