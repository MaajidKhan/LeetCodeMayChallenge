MAY 4, 2020.

CHALLENGE 4:
Number Complement

Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

Example 1:

Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
 

Example 2:

Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
___________________________________________________________________________________________________________________________________________________

class Solution {
    public int findComplement(int num) {
        String a = Integer.toBinaryString(num);
        char []arr = a.toCharArray();
        String fl = "";
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i] == '0')
            {
                arr[i] = '1';
            }
            else
            {
                arr[i] = '0';
            }
            fl += arr[i];
        }
        int decimal=Integer.parseInt(fl,2);
        return decimal;
        
    }
	
/*
149 / 149 test cases passed.
Status: Accepted
Runtime: 9 ms
Memory Usage: 36.9 MB
*/
________________________________________________________________________________________________________________________________________________________________________________
class Solution {
    public int findComplement(int num) {
        // Find number of bits in the  
        // given integer 
        int number_of_bits =  
               (int)(Math.floor(Math.log(num) / 
                             Math.log(2))) + 1; 
  
        // XOR the given integer with poe(2, 
        // number_of_bits-1 and print the result 
        return ((1 << number_of_bits) - 1) ^ num; 
    }
}
/*
149 / 149 test cases passed.
Status: Accepted
Runtime: 0 ms
Memory Usage: 36.5 MB
*/

___________________________________________________________________________________________________________________________________________________________________________